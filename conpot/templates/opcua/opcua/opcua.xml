<opcua enabled="True" name="MJ OPCUA Server" host="0.0.0.0" port="4881">

    <!-- 流量计 -->
    <object node_id="ns=1;s=Flowmeter" browser_name="Flowmeter">
        <variable node_id="ns=1;s=Flowmeter.Values" browser_name="Values" readonly="True">
            <value type="array">[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</value>
        </variable>
    </object>

    <!-- 开元RGV -->
    <!-- State: waiting stopped halt running off fault repair -->
    <!-- LoadState: no_load full_load -->
    <object node_id="ns=1;s=KYRgv" browser_name="KYRgv">
        <variable node_id="ns=1;s=KYRgv.State" browser_name="State" readonly="True">
            <value type="str">waiting</value>
        </variable>
        <variable node_id="ns=1;s=KYRgv.LoadState" browser_name="LoadState" readonly="True">
            <value type="str">no_load</value>
        </variable>
        <variable node_id="ns=1;s=KYRgv.CurrentSite" browser_name="CurrentSite" readonly="True">
            <value type="int">1</value>
        </variable>
        <method node_id="ns=1;s=KYRgv.Go" browser_name="Go">
            <input_args>Int64,Int64</input_args>
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def go(parent, source_site_variant, target_site_variant):
    databus.set_value('w ns=1;s=KYRgv.Go', (source_site_variant.Value, target_site_variant.Value), forced=True)
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, go, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>

    <!-- 开元焊接机器人 -->
    <object node_id="ns=1;s=KYWeldRobot" browser_name="KYWeldRobot">
        <variable node_id="ns=1;s=KYWeldRobot.State" browser_name="KYWeldRobotState" readonly="True">
            <value type="str">teaching</value>
        </variable>
        <variable node_id="ns=1;s=KYWeldRobot.isWelding" browser_name="isWelding" readonly="True">
            <value type="bool">False</value>
        </variable>
        <variable node_id="ns=1;s=KYWeldRobot.servo_ON" browser_name="servo_ON" readonly="True">
            <value type="bool">False</value>
        </variable>
        <variable node_id="ns=1;s=KYWeldRobot.hasErrors" browser_name="hasErrors" readonly="True">
            <value type="bool">False</value>
        </variable>
        <!--<variable node_id="ns=1;s=KYWeldRobot.repeat_time" browser_name="repeat_time" readonly="True">-->
            <!--<value type="float">0.0</value>-->
        <!--</variable>-->
    </object>

    <!-- 明匠坡口机器人 -->
    <!-- State: waiting -> starting -> delivered -> grooved －> completed -->
    <object node_id="ns=1;s=MJGrooveRobot" browser_name="MJGrooveRobot">
        <variable node_id="ns=1;s=MJGrooveRobot.MovingPro" browser_name="MovingPro" >
            <value type="int">1</value>
        </variable>
         <variable node_id="ns=1;s=MJGrooveRobot.FaultStatus" browser_name="FaultStatus" >
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJGrooveRobot.CuttingPro" browser_name="CuttingPro" >
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJGrooveRobot.State" browser_name="State" readonly="True">
            <value type="str">waiting</value>
        </variable>
        <method node_id="ns=1;s=MJGrooveRobot.Start" browser_name="Start">
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def start(parent, move_pro_variant, cut_pro_variant):
    ret = databus.set_value('w ns=1;s=MJGrooveRobot.MovingPro', move_pro_variant.Value, sync=True)
    if not ret or not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    ret = databus.set_value('w ns=1;s=MJGrooveRobot.CuttingPro', cut_pro_variant.Value, sync=True)
    if not ret or not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    # 确保已经清零
    ret = databus.set_value('w ns=1;s=MJGrooveRobot.StartSignal', False, sync=True, forced=True)
    if not ret or not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    # 写入运行指令
    ret = databus.set_value('w ns=1;s=MJGrooveRobot.StartSignal', True, sync=True)
    if not ret or not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    server.get_node('ns=1;s=MJGrooveRobot.State').set_value('starting')
    # 异步延时清零
    databus.set_value('w ns=1;s=MJGrooveRobot.StartSignal', False, delay=2)
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, start, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>

    <!-- 明匠立体仓库 -->
    <object node_id="ns=1;s=MJWarehouse" browser_name="MJWarehouse">
        <variable node_id="ns=1;s=MJWarehouse.InOutLocation" browser_name="InOutLocation">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJWarehouse.MpLocation" browser_name="MpLocation">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJWarehouse.MStatus" browser_name="MStatus" readonly="True">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJWarehouse.FinishStatus" browser_name="FinishStatus">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJWarehouse.FaultStatus" browser_name="FaultStatus" readonly="True">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJWarehouse.EnableState" browser_name="EnableState" readonly="True">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJWarehouse.OriginStatus" browser_name="OriginStatus" readonly="True">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJWarehouse.Fault" browser_name="Fault" readonly="True">
            <!--<value type="array">[False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False]</value>-->
            <value type="array">[False,False,False]</value>
        </variable>
        <method node_id="ns=1;s=MJWarehouse.Start" browser_name="Start">
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def start(parent, mp_variant, io_variant, start_variant):
    ret = databus.set_value('w ns=1;s=MJWarehouse.FaultStatus', 5, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    ret = databus.set_value('w ns=1;s=MJWarehouse.MpLocation', mp_variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    ret = databus.set_value('w ns=1;s=MJWarehouse.InOutLocation', io_variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    ret = databus.set_value('w ns=1;s=MJWarehouse.Start', start_variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, start, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>

    <!-- 新松机器人 -->
    <object node_id="ns=1;s=SSRobot" browser_name="SSRobot">
        <variable node_id="ns=1;s=SSRobot.Moved" browser_name="Moved" readonly="True">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=SSRobot.Cutting" browser_name="Cutting" readonly="True">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=SSRobot.Welding" browser_name="Welding" readonly="True">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=SSRobot.FaultStatus" browser_name="FaultStatus" readonly="True">
            <value type="int">1</value>
        </variable>
        <!--搬运开始-->
        <method node_id="ns=1;s=SSRobot.MovingStart" browser_name="MovingStart">
            <input_args>Int64,Int64</input_args>
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def start(parent, floor_variant, movePro_variant):
    ret = databus.set_value('w ns=1;s=SSRobot.Floors', floor_variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    ret = databus.set_value('w ns=1;s=SSRobot.MovePro', movePro_variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    #搬运开始置0
    var = databus.get_value('r ns=1;s=SSRobot.MovingStart')[0] & 0b1111111011111111
    ret = databus.set_value('w ns=1;s=SSRobot.MovingStart', var, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    ret = databus.set_value('w ns=1;s=SSRobot.MovingStart', 256, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, start, input_args, output_args)
                ]]>
            </func>
        </method>
                <!--焊接开始-->
        <method node_id="ns=1;s=SSRobot.WeldingStart" browser_name="WeldingStart">
            <input_args>Int64</input_args>
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def start(parent, weldPro):
    mrs = databus.get_value('r ns=1;s=MJMoveRobot.Run')
    if mrs:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    ret = databus.set_value('w ns=1;s=SSRobot.WeldingPro', weldPro.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    var = databus.get_value('r ns=1;s=SSRobot.WeldingStart')[0] & 0b1111101111111111
    ret = databus.set_value('w ns=1;s=SSRobot.WeldingStart', var, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    ret = databus.set_value('w ns=1;s=SSRobot.WeldingStart', 1024, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, start, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>

    <!-- 新松AGV -->
    <object node_id="ns=1;s=SSAgv" browser_name="SSAgv">
        <method node_id="ns=1;s=SSAgv.SendOrder" browser_name="SendOrder">
            <input_args>Int64,Int64,Int64</input_args>
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def send_order(parent, order_no_variant, source_site_variant, target_site_variant):
    ret = databus.set_value('w ns=1;s=SSAgv.SendOrder', (order_no_variant.Value, source_site_variant.Value, target_site_variant.Value), sync=True, forced=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, send_order, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>

     <!-- 牛腿搬运机器人 -->
    <object node_id="ns=1;s=MJMoveRobot" browser_name="MJMoveRobot">
        <variable node_id="ns=1;s=MJMoveRobot.Move" browser_name="Move">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJMoveRobot.FinishStatus" browser_name="FinishStatus">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJMoveRobot.Status" browser_name="Status">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJMoveRobot.MagnetConfirm" browser_name="MagnetConfirm">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJMoveRobot.Fault" browser_name="Fault">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJMoveRobot.Wait" browser_name="Wait">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MJMoveRobot.Run" browser_name="Run">
            <value type="int">1</value>
        </variable>
   <method node_id="ns=1;s=MJMoveRobot.Start" browser_name="Start">
            <input_args>Int64</input_args>
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def start(parent, variant):
    var = (databus.get_value('r ns=1;s=SSRobot.Moved')[0]
    safe = var & 0b0000100000000000
    if (safe == 2048):
        return [ua.Variant(False, ua.VariantType.Boolean)]
    clc = databus.set_value('w ns=1;s=MJMoveRobot.FinishStatus', 5, sync=True)
    if not clc[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    ret = databus.set_value('w ns=1;s=MJMoveRobot.Move', variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, start, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>

    <event event_id="ns=1;s=SSAgv.ConfirmedEvent" severity="300">
        <message>Confirmed Event</message>
    </event>

    <event event_id="ns=1;s=SSAgv.CompletedEvent" severity="300">
        <message>Completed Event</message>
    </event>

</opcua>