<opcua enabled="True" name="MJ OPCUA Server" host="0.0.0.0" port="4881">

    <!-- 开元RGV -->
    <object node_id="ns=1;s=KYRgv" browser_name="KYRgv">
        <variable node_id="ns=1;s=KYRgv.State" browser_name="State" readonly="True">
            <!-- waiting stopped halt running fault repair -->
            <value type="str">waiting</value>
        </variable>
        <variable node_id="ns=1;s=KYRgv.LoadState" browser_name="LoadState" readonly="True">
            <!-- no_load full_load -->
            <value type="str">no_load</value>
        </variable>
        <variable node_id="ns=1;s=KYRgv.CurrentSite" browser_name="CurrentSite" readonly="True">
            <value type="int">1</value>
        </variable>
        <method node_id="ns=1;s=KYRgv.Go" browser_name="Go">
            <input_args>Int64,Int64</input_args>
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def go(parent, source_site_variant, target_site_variant):
    ret = databus.set_value('w ns=1;s=KYRgv.Go', (source_site_variant.Value, target_site_variant.Value), sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, go, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>

    <!-- 明匠坡口机器人 -->
    <object node_id="ns=1;s=MJGrooveRobot" browser_name="MJGrooveRobot">
        <variable node_id="ns=1;s=MJGrooveRobot.State" browser_name="State" readonly="True">
            <!-- waiting -> starting -> delivered -> grooved －> completed -->
            <value type="str">waiting</value>
        </variable>
        <method node_id="ns=1;s=MJGrooveRobot.Start" browser_name="Start">
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def start(parent):
    ret = databus.set_value('w ns=1;s=MJGrooveRobot.StartSignal', 1, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    server.get_node('ns=1;s=MJGrooveRobot.State').set_value('starting')
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, start, input_args, output_args)
                ]]>
            </func>
        </method>
        <method node_id="ns=1;s=MJGrooveRobot.Confirm" browser_name="Confirm">
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def confirm(parent):
    ret = databus.set_value('w ns=1;s=MJGrooveRobot.StartSignal', 0, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    server.get_node('ns=1;s=MJGrooveRobot.State').set_value('waiting')
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, confirm, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>

    <!-- 明匠立体仓库 -->
    <object node_id="ns=1;s=MJWarehouse" browser_name="MJWarehouse">
        <variable node_id="ns=1;s=MJWarehouse.FinishStatus" browser_name="FinishStatus" readonly="True">
            <value type="int">1</value>
        </variable>
        <method node_id="ns=1;s=MJWarehouse.StartDirection" browser_name="StartDirection">
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def start(parent, variant):
    ret = databus.set_value('w ns=1;s=MJWarehouse.StartDirection', variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, start, input_args, output_args)
                ]]>
            </func>
        </method>
        <method node_id="ns=1;s=MJWarehouse.InOutLocation" browser_name="InOutLocation">
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def confirm(parent, variant):
    ret = databus.set_value('w ns=1;s=MJWarehouse.InOutLocation', variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, confirm, input_args, output_args)
                ]]>
            </func>
        </method>
        <method node_id="ns=1;s=MJWarehouse.MpLocation" browser_name="MpLocation">
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def confirm(parent, variant):
    ret = databus.set_value('w ns=1;s=MJWarehouse.MpLocation', variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, confirm, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>

    <!--
    <object node_id="ns=1;s=MyFolder.SinsunRobot" browser_name="SinsunRobot" parent="ns=1;s=MyFolder">
        <variable node_id="ns=1;s=MyFolder.SinsunRobot.MyVar" browser_name="MyVar">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MyFolder.SinsunRobot.Move" browser_name="Move">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MyFolder.SinsunRobot.Status" browser_name="Status">
            <value type="int">1</value>
        </variable>
        <variable node_id="ns=1;s=MyFolder.SinsunRobot.Pro" browser_name="Pro">
            <value type="int">1</value>
        </variable>
        <method node_id="ns=1;s=MyFolder.MyObject.MyTestMethod" browser_name="MyTestMethod">
            <input_args>Int64</input_args>
            <output_args>Boolean</output_args>
            <func>
                <![CDATA[
def func(parent, variant):
    ret = databus.set_value('w ns=1;s=MyFolder.SinsunRobot.Status', variant.Value, sync=True)
    if not ret[0]:
        return [ua.Variant(False, ua.VariantType.Boolean)]
    return [ua.Variant(True, ua.VariantType.Boolean)]

Server.create_method(ua_object, node_id, browser_name, func, input_args, output_args)
                ]]>
            </func>
        </method>
    </object>
    -->

    <event event_id="MyEvent" severity="300">
        <message>This is my event</message>
    </event>
</opcua>